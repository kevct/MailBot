"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrackingImplementation = void 0;
var util_1 = require("../lib/util");
var error_1 = require("../error/error");
var error_enum_1 = require("../error/error_enum");
var TrackingImplementation = /** @class */ (function () {
    function TrackingImplementation(request) {
        this.request = request;
    }
    /**
     * Create a tracking.
     * @param data Tracking post Request Object
     */
    TrackingImplementation.prototype.createTracking = function (data) {
        // make request
        return this.request.makeRequest({ method: 'POST', url: '/trackings' }, data);
    };
    /**
     * Delete a tracking.
     * @param single_tracking_param The param to identify the single tracking.
     */
    TrackingImplementation.prototype.deleteTracking = function (single_tracking_param) {
        var trackingUrl = util_1.buildTrackingUrl(single_tracking_param);
        // make request
        return this.request.makeRequest({ method: 'DELETE', url: "/trackings/" + trackingUrl });
    };
    /**
     * Get tracking results of multiple trackings.
     * trackings_query_params to include: page,limit,keyword,slug,delivery_time,origin
     * ,destination,tag,created_at_min,created_at_max,fields,lang
     * @param trackings_query_params Tracking list query params object
     */
    TrackingImplementation.prototype.listTrackings = function (trackings_query_params) {
        var queryString = util_1.getQueryString(trackings_query_params);
        var trackingUrl = queryString === '' ? '/trackings' : "/trackings?" + queryString;
        // make request
        return this.request.makeRequest({ method: 'GET', url: trackingUrl });
    };
    /**
     * Get tracking results of a single tracking.
     * tracking_query_params to include: fields, lang
     * @param single_tracking_param The param to identify the single tracking.
     * @param tracking_query_params Tracking query params object
     */
    TrackingImplementation.prototype.getTracking = function (single_tracking_param, tracking_query_params) {
        var trackingUrl = "/trackings/" + util_1.buildTrackingUrl(single_tracking_param);
        var queryString = util_1.getQueryString(tracking_query_params);
        trackingUrl = util_1.combineUrlQuery(trackingUrl, queryString);
        // make request
        return this.request.makeRequest({ method: 'GET', url: trackingUrl });
    };
    /**
     * Update a tracking.
     * tracking_update_params to include: smses, emails,title,customer_name,order_id,
     * order_id_path,custom_fields,note,language,order_promised_delivery_date,delivery_type,pickup_location,pickup_note
     * @param single_tracking_param The param to identify the single tracking.
     * @param tracking_update_params Tracking update params object
     */
    TrackingImplementation.prototype.updateTracking = function (single_tracking_param, data) {
        var trackingUrl = "/trackings/" + util_1.buildTrackingUrl(single_tracking_param);
        // make request
        return this.request.makeRequest({ method: 'PUT', url: trackingUrl }, data);
    };
    /**
     * Retrack an expired tracking. Max 3 times per tracking.
     * @param single_tracking_param The param to identify the single tracking.
     */
    TrackingImplementation.prototype.retrack = function (single_tracking_param) {
        var trackingUrl = "/trackings/" + util_1.buildTrackingUrl(single_tracking_param, 'retrack');
        // make request
        return this.request.makeRequest({ method: 'POST', url: trackingUrl });
    };
    /**
     * Mark a tracking as completed. The tracking won't auto update until retrack it.
     * @param single_tracking_param The param to identify the single tracking.
     * @param reason_param The param to mark tracking as complete.
     */
    TrackingImplementation.prototype.markAsCompleted = function (single_tracking_param, reason_param) {
        var trackingUrl = "/trackings/" + util_1.buildTrackingUrl(single_tracking_param, 'mark-as-completed');
        if (reason_param === undefined || (reason_param.reason !== 'DELIVERED'
            && reason_param.reason !== 'LOST' && reason_param.reason !== 'RETURNED_TO_SENDER')) {
            throw error_1.AftershipError.getSdkError(error_enum_1.ErrorEnum.handlerInvalidMarkAsCompletedReason, reason_param);
        }
        // make request
        return this.request.makeRequest({ method: 'POST', url: trackingUrl }, reason_param);
    };
    return TrackingImplementation;
}());
exports.TrackingImplementation = TrackingImplementation;
//# sourceMappingURL=tracking.js.map