"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificationImplementation = void 0;
var util_1 = require("../lib/util");
var NotificationImplementation = /** @class */ (function () {
    function NotificationImplementation(request) {
        this.request = request;
    }
    /**
     * Get contact information for the users to notify when the tracking changes.
     * Please note that only customer receivers will be returned.
     * Any email, sms or webhook that belongs to the Store will not be returned.
     * @param tracking_param The param to identify the single tracking.
     * Either id or (slug + tracking_number) should be specified.
     */
    NotificationImplementation.prototype.getNotification = function (tracking_param) {
        try {
            var trackingUrl = util_1.buildTrackingUrl(tracking_param);
            return this.request.makeRequest({
                method: 'GET',
                url: "/notifications/" + trackingUrl,
            });
        }
        catch (e) {
            return Promise.reject(e);
        }
    };
    /**
     * Add notification receivers to a tracking id (number).
     * @param tracking_param The param to identify the single tracking.
     * Either id or (slug + tracking_number) should be specified.
     * @param notification Notification Request Object
     */
    NotificationImplementation.prototype.addNotification = function (tracking_param, notification) {
        try {
            var trackingUrl = util_1.buildTrackingUrl(tracking_param, 'add');
            return this.request.makeRequest({ method: 'POST', url: "/notifications/" + trackingUrl }, notification);
        }
        catch (e) {
            return Promise.reject(e);
        }
    };
    /**
     * Remove notification receivers from a tracking id (number).
     * @param tracking_param The param to identify the single tracking.
     * Either id or (slug + tracking_number) should be specified.
     * @param notification Notification Request Object
     */
    NotificationImplementation.prototype.removeNotification = function (tracking_param, notification) {
        try {
            var trackingUrl = util_1.buildTrackingUrl(tracking_param, 'remove');
            return this.request.makeRequest({
                method: 'POST',
                url: "/notifications/" + trackingUrl,
            }, notification);
        }
        catch (e) {
            return Promise.reject(e);
        }
    };
    return NotificationImplementation;
}());
exports.NotificationImplementation = NotificationImplementation;
//# sourceMappingURL=notification.js.map