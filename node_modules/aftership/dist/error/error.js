"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AftershipError = void 0;
var AftershipError = /** @class */ (function (_super) {
    __extends(AftershipError, _super);
    function AftershipError(type, message) {
        var _this = _super.call(this, message) || this;
        _this.type = type;
        _this.code = '';
        _this.data = {};
        _this.responseBody = '';
        return _this;
    }
    /**
     * Static Method for getting SDK error
     * @param error error
     * @param errorData The object trigger the error
     */
    AftershipError.getSdkError = function (error, errorData) {
        error.data = errorData;
        Error.captureStackTrace(error);
        return error;
    };
    /**
     * Static Method for getting REQUEST error
     * @param error error
     * @param error_data The object trigger the error
     */
    AftershipError.getRequestError = function (request_error, error_data) {
        var error = new AftershipError(request_error.errno, request_error.message);
        error.data = error_data;
        error.code = request_error.code;
        return error;
    };
    /**
     * Static Method for getting API error
     * @param responseBody response-body
     */
    AftershipError.getApiError = function (responseBody) {
        var error = new AftershipError();
        if (responseBody === null || responseBody === undefined) {
            // Can't get the response body, set 500 error by default
            error.type = 'InternalError';
            error.code = '500';
            return error;
        }
        if (responseBody.meta !== null && responseBody.meta !== undefined) {
            error.type = responseBody.meta.type;
            error.message = responseBody.meta.message;
            error.code = responseBody.meta.code;
        }
        error.data = responseBody.data;
        error.responseBody = JSON.stringify(responseBody);
        return error;
    };
    return AftershipError;
}(Error));
exports.AftershipError = AftershipError;
//# sourceMappingURL=error.js.map