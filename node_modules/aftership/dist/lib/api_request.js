"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiRequestImplementation = void 0;
var axios_1 = __importDefault(require("axios"));
var debug_1 = __importDefault(require("debug"));
var uuid_1 = require("uuid");
var version_1 = require("./version");
var error_1 = require("../error/error");
var debugMakeRequest = debug_1.default('aftership:makeRequest');
var debugProcessResponse = debug_1.default('aftership:processResponse');
var debugProcessException = debug_1.default('aftership:processException');
var debugRateLimiting = debug_1.default('aftership:setRateLimiting');
var TIMEOUT = 50000;
/**
 * The implementation of API request
 */
var ApiRequestImplementation = /** @class */ (function () {
    function ApiRequestImplementation(app) {
        this.app = app;
    }
    /**
     * Make a request call to AfterShip API
     * @param config the config of request (f.e. url, method)
     * @param data data
     */
    ApiRequestImplementation.prototype.makeRequest = function (_a, data) {
        var _this = this;
        var url = _a.url, method = _a.method;
        debugMakeRequest('config %o', {
            url: url,
            method: method,
            apiKey: this.app.apiKey,
        });
        var request_id = uuid_1.v4();
        var headers = {
            'aftership-api-key': this.app.apiKey,
            'Content-Type': 'application/json',
            'request-id': request_id,
            'aftership-agent': "nodejs-sdk-" + version_1.VERSION,
        };
        // Only set User-Agent header in Node
        if (typeof window === 'undefined') {
            headers['User-Agent'] = this.app.user_agent_prefix + "/" + version_1.VERSION;
        }
        var request = axios_1.default.request({
            url: url,
            method: method,
            headers: headers,
            baseURL: this.app.endpoint,
            data: data !== undefined ? __assign({}, data) : null,
            timeout: TIMEOUT,
        });
        // return Promise
        return new Promise(function (resolve, reject) {
            request
                .then(function (_a) {
                var headers = _a.headers, data = _a.data;
                _this.setRateLimiting(_this.app, headers);
                resolve(_this.processResponse(data));
            })
                .catch(function (e) { return reject(_this.processException(e)); });
        });
    };
    ApiRequestImplementation.prototype.processResponse = function (data) {
        debugProcessResponse('body %o', data);
        // Return data in response
        return data['data'];
    };
    ApiRequestImplementation.prototype.processException = function (error) {
        debugProcessException('UnexpectedError %s', error.message);
        if (error.response) {
            // The request was made and the server responded with a status code
            // that falls out of the range of 2xx
            if (error.response.status !== 401) {
                // Not UnauthorizedError
                // Set rate_limit
                this.setRateLimiting(this.app, error.response.headers);
            }
            return error_1.AftershipError.getApiError(error.response.data);
        }
        if (error.request) {
            // The request was made but no response was received
            // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
            // http.ClientRequest in node.js
            return error_1.AftershipError.getRequestError(error, error.config);
        }
        // Something happened in setting up the request that triggered an Error
        return new error_1.AftershipError('Setup Request Error', error.message);
    };
    ApiRequestImplementation.prototype.setRateLimiting = function (app, data) {
        if (!data) {
            return;
        }
        var rateLimiting = {
            reset: data['x-ratelimit-reset'],
            limit: data['x-ratelimit-limit'],
            remaining: data['x-ratelimit-remaining'],
        };
        debugRateLimiting('rateLimiting %o', rateLimiting);
        app.rate_limit = rateLimiting;
    };
    return ApiRequestImplementation;
}());
exports.ApiRequestImplementation = ApiRequestImplementation;
//# sourceMappingURL=api_request.js.map