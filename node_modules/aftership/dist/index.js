"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AfterShip = void 0;
var api_request_1 = require("./lib/api_request");
var error_1 = require("./error/error");
var error_enum_1 = require("./error/error_enum");
var util_1 = require("./lib/util");
var courier_1 = require("./implementation/courier");
var last_checkpoint_1 = require("./implementation/last_checkpoint");
var notification_1 = require("./implementation/notification");
var tracking_1 = require("./implementation/tracking");
var DEFAULT_ENDPOINT = 'https://api.aftership.com/v4';
var DEFAULT_USER_AGENT = 'aftership-sdk-nodejs';
var AfterShip = /** @class */ (function () {
    function AfterShip(apiKey, options) {
        this.errorHandling(apiKey, options);
        this.apiKey = apiKey;
        // Setup
        if (options !== null && options !== undefined) {
            this.endpoint = util_1.isStringValid(options.endpoint)
                ? options.endpoint
                : DEFAULT_ENDPOINT;
            this.user_agent_prefix = util_1.isStringValid(options.user_agent_prefix)
                ? options.user_agent_prefix
                : DEFAULT_USER_AGENT;
        }
        else {
            this.endpoint = DEFAULT_ENDPOINT;
            this.user_agent_prefix = DEFAULT_USER_AGENT;
        }
        this.rate_limit = {
            reset: null,
            limit: null,
            remaining: null,
        };
        var request = new api_request_1.ApiRequestImplementation(this);
        // Endpoints
        this.courier = new courier_1.CourierImplementation(request);
        this.last_checkpoint = new last_checkpoint_1.LastCheckpointImplementation(request);
        this.notification = new notification_1.NotificationImplementation(request);
        this.tracking = new tracking_1.TrackingImplementation(request);
    }
    /**
     * Error Handling function
     * Throw error if the input param contain incorrect type
     * @param apiKey api key
     */
    AfterShip.prototype.errorHandling = function (apiKey, options) {
        if (!util_1.isStringValid(apiKey)) {
            // Verify api_key
            throw error_1.AftershipError.getSdkError(error_enum_1.ErrorEnum.constructorInvalidApiKey, apiKey);
        }
        if (options !== null && options !== undefined) {
            // Verify options
            if (typeof options !== 'object') {
                throw error_1.AftershipError.getSdkError(error_enum_1.ErrorEnum.constructorInvalidOptions, options);
            }
            // Verify options value
            if (options.endpoint !== null &&
                options.endpoint !== undefined &&
                typeof options.endpoint !== 'string') {
                // Verify endpoint
                throw error_1.AftershipError.getSdkError(error_enum_1.ErrorEnum.constructorInvalidEndpoint, options.endpoint);
            }
        }
    };
    return AfterShip;
}());
exports.AfterShip = AfterShip;
//# sourceMappingURL=index.js.map